// Generated by CoffeeScript 1.6.2
var CoffeeScriptCompiler, ConsoleSegment, DocumentSegment, GenericCompiler, MarkdownSegment, PythonCompiler, RubyCompiler,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

window.LiterateLoader = (function() {
  function LiterateLoader() {
    this.debug = true;
    this.print_buffer = [];
    this.segments = [];
  }

  LiterateLoader.prototype.identify_segment = function(line) {
    var s, segment_types, _i, _len;

    if (line === "") {
      return "blank";
    }
    segment_types = [CodeSegment, ConsoleSegment, MarkdownSegment];
    for (_i = 0, _len = segment_types.length; _i < _len; _i++) {
      s = segment_types[_i];
      if (s.identifier.test(line)) {
        return s;
      }
    }
    return assert(false, "No identifier matched the target line: '" + line + "'");
  };

  LiterateLoader.prototype.load = function(text) {
    var block_type, code, line, lines, markdown, seg_type, segment, this_seg_type, _i, _len;

    this.clear();
    text = text.replace(/[\r]/gm, "");
    lines = text.split(/\n/);
    block_type = null;
    code = markdown = "";
    seg_type = "blank";
    this.segments = [];
    line = lines.shift();
    seg_type = this.identify_segment(line);
    while (seg_type === "blank") {
      line = lines.shift();
      seg_type = this.identify_segment(line);
    }
    segment = new seg_type();
    segment.lines.push(line);
    for (_i = 0, _len = lines.length; _i < _len; _i++) {
      line = lines[_i];
      console.log("Looking at line " + line + "...");
      console.log("Identified character zero: " + (line.charCodeAt(0)));
      this_seg_type = this.identify_segment(line);
      console.log("Type: " + this_seg_type);
      if (this_seg_type === "blank" || this_seg_type === seg_type) {
        segment.lines.push(line);
      } else {
        seg_type = this_seg_type;
        segment.finish_loading();
        this.segments.push(segment);
        segment = new this_seg_type();
        segment.lines.push(line);
      }
    }
    segment.finish_loading();
    return this.segments.push(segment);
  };

  LiterateLoader.prototype.render = function() {
    var s, _i, _len, _ref;

    _ref = this.segments;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      s = _ref[_i];
      $('.segments').append(s.encapsulate());
    }
    return this.contentUpdated();
  };

  LiterateLoader.prototype.print = function(text) {
    return this.print_buffer.push($.trim(text));
  };

  LiterateLoader.prototype.empty_print_buffer = function() {
    var p;

    p = this.print_buffer;
    this.print_buffer = [];
    return p;
  };

  LiterateLoader.prototype.run = function() {
    var error, s, success, _i, _len, _ref;

    this.empty_print_buffer();
    success = true;
    try {
      _ref = this.segments;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        s = _ref[_i];
        s.run();
      }
    } catch (_error) {
      error = _error;
      console.log("Execution halted due to errors: ", error);
      success = false;
    }
    if (success) {
      $('.run-button').addClass('success');
      $('.run-button').removeClass('failure');
      return setTimeout(function() {
        return $('.run-button').removeClass('success');
      }, 2000);
    } else {
      return $('.run-button').addClass('failure');
    }
  };

  LiterateLoader.prototype["export"] = function() {
    var code, s, _i, _len, _ref;

    code = [];
    _ref = this.segments;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      s = _ref[_i];
      code.push(s["export"]());
    }
    return code.join("");
  };

  LiterateLoader.prototype.save = function() {
    var s, _i, _len, _ref;

    _ref = this.segments;
    for (_i = 0, _len = _ref.length; _i < _len; _i++) {
      s = _ref[_i];
      if (s.is_editing) {
        s.save();
      }
    }
    return $.post("/raw/" + window.filename, {
      data: this["export"]()
    });
  };

  LiterateLoader.prototype.clear = function() {
    return $('.segments').html('');
  };

  LiterateLoader.prototype.contentUpdated = function() {
    $('.markdown').each(function() {
      if ($(this).attr('data-markdown') != null) {
        return $(this).html(marked($(this).attr('data-markdown')));
      } else {
        console.warn("Note: you have a markdown element that is relying on HTML -> HTML transfer. This is unreliable.");
        return $(this).html($(this).text());
      }
    });
    return $('.code').each(function() {
      if ($(this).attr('data-code') != null) {
        return $(this).html(hljs.highlight('coffeescript', $(this).attr('data-code')).value);
      } else {
        $(this).html(hljs.highlight('coffeescript', $(this).html()).value);
        return console.warn("Note: you have a code element that is relying on HTML -> HTML transfer. This is unreliable.");
      }
    });
  };

  return LiterateLoader;

})();

DocumentSegment = (function() {
  function DocumentSegment(encapsulation_id) {
    this.encapsulation_id = encapsulation_id != null ? encapsulation_id : false;
    this.dom_element = null;
    if (!this.encapsulation_id) {
      this.encapsulation_id = "" + Math.floor(Math.random() * 1000000);
    }
    this.lines = [];
    this.allow_editing = false;
    this.is_editing = false;
  }

  DocumentSegment.prototype.finish_loading = function() {
    return this.load(this.lines.join("\n"));
  };

  DocumentSegment.prototype["export"] = function() {
    return "";
  };

  DocumentSegment.prototype.load = function() {
    return assert(false, 'Invalid call of base DocumentSegment load.');
  };

  DocumentSegment.prototype.run = function() {
    return true;
  };

  DocumentSegment.prototype.my_element_string = function() {
    return "literate_segment_" + this.encapsulation_id;
  };

  DocumentSegment.prototype.my_element = function() {
    return $("#" + (this.my_element_string()));
  };

  DocumentSegment.prototype.render = function() {
    return assert(false, "It is illegal to try to render a generic DocumentSegment");
  };

  DocumentSegment.prototype.edit = function() {
    return assert(false, "It is illegal to try to edit the generic DocumentSegment");
  };

  DocumentSegment.prototype.encapsulate = function() {
    var edit_button, me, s;

    s = "<div class='segment' id='" + (this.my_element_string()) + "'></div>";
    this.dom_element = $(s);
    this.dom_element.append(this.render());
    if (this.allow_editing) {
      me = this;
      edit_button = $('<div class="edit-button">EDIT</div>');
      edit_button.click(function() {
        return me.edit.call(me);
      });
      this.dom_element.append(edit_button);
      this.dom_element.dblclick(function(e) {
        me.edit.call(me);
        e.preventDefault();
        return false;
      });
    }
    return this.dom_element;
  };

  return DocumentSegment;

})();

window.CodeSegment = (function(_super) {
  __extends(CodeSegment, _super);

  function CodeSegment(code) {
    this.code = code != null ? code : "";
    CodeSegment.__super__.constructor.call(this);
    this.allow_editing = true;
    true;
  }

  CodeSegment.identifier = /^\t/;

  CodeSegment.prototype.load = function(code) {
    code = $.trim(code);
    return this.code = code;
  };

  CodeSegment.prototype.finish_loading = function() {
    var line;

    this.lines = (function() {
      var _i, _len, _ref, _results;

      _ref = this.lines;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        line = _ref[_i];
        _results.push(line.replace(/^\t/, ''));
      }
      return _results;
    }).call(this);
    return this.load(this.lines.join("\n"));
  };

  CodeSegment.prototype.run = function() {
    var assembly, error, error_element, error_message, js_code;

    this.my_element().removeClass('error');
    this.my_element().find('.error_message').remove();
    js_code = "";
    try {
      assembly = window.compiler.compile(this.code);
    } catch (_error) {
      error = _error;
      this.my_element().addClass('error');
      error_message = ("<b>Error</b> compiling " + window.compiler.language + " on element with error: ") + error;
      error_element = $("<div class='error_message'></div>").html(error_message);
      this.my_element().children('.code').append(error_element);
      console.log(error_message);
      throw error_message;
    }
    try {
      window.compiler.run(assembly);
      return window["eval"].call(window, js_code);
    } catch (_error) {
      error = _error;
      this.my_element().addClass('error');
      error_message = "<b>Error</b> running compiled js on element with error: " + error;
      error_element = $("<div class='error_message'></div>").html(error_message);
      this.my_element().children('.code').append(error_element);
      console.log(error_message);
      throw error_message;
    }
  };

  CodeSegment.prototype.edit = function() {
    var me;

    me = this;
    assert(typeof codemirror !== "undefined" && codemirror !== null, "CodeMirror is not loaded, for some reason.");
    this.is_editing = true;
    codemirror.setOption('mode', 'coffeescript');
    codemirror.setOption('value', this.code);
    $(".CodeMirror").width($('body').width() - 30);
    $('.CodeMirror').find('.save-button').unbind('click').click(function() {
      return me.save.call(me);
    });
    $('.CodeMirror').show();
    $('.codeblanket').show();
    $('.codeblanket').click(function() {
      if (confirm("Cancel editing?")) {
        return me.finish_editing.call(me);
      }
    });
    return codemirror.scrollIntoView();
  };

  CodeSegment.prototype["export"] = function() {
    var l, lines, output, _i, _len;

    lines = this.code.split(/\n/);
    output = "";
    for (_i = 0, _len = lines.length; _i < _len; _i++) {
      l = lines[_i];
      output += "\t" + l + "\n";
    }
    return output;
  };

  CodeSegment.prototype.save = function() {
    this.code = codemirror.getValue().replace(/\r/mg, "\n");
    this.reload_code();
    return this.finish_editing();
  };

  CodeSegment.prototype.reload_code = function() {
    this.dom_element.removeClass('error');
    this.dom_element.children(".code").remove();
    this.dom_element.append(this.render());
    return lit.contentUpdated();
  };

  CodeSegment.prototype.finish_editing = function() {
    $('.CodeMirror').hide();
    $('.codeblanket').hide();
    $(".codeblanket").unbind();
    return this.is_editing = false;
  };

  CodeSegment.prototype.render = function(self) {
    var element;

    element = $("<div class='code'></div>");
    element.attr('data-code', this.code);
    return element;
  };

  return CodeSegment;

})(DocumentSegment);

MarkdownSegment = (function(_super) {
  __extends(MarkdownSegment, _super);

  function MarkdownSegment(content) {
    this.content = content != null ? content : "";
    MarkdownSegment.__super__.constructor.call(this);
    this.allow_editing = true;
  }

  MarkdownSegment.identifier = /(?:)/;

  MarkdownSegment.prototype.load = function(content) {
    content = $.trim(content);
    return this.content = content;
  };

  MarkdownSegment.prototype.render = function(self) {
    var element;

    element = $("<div class='markdown'>" + this.content + "</div>");
    element.attr('data-markdown', this.content);
    return element;
  };

  MarkdownSegment.prototype["export"] = function() {
    return this.content + "\n";
  };

  MarkdownSegment.prototype.edit = function() {
    var me;

    me = this;
    this.is_editing = true;
    assert(typeof codemirror !== "undefined" && codemirror !== null, "CodeMirror is not loaded, for some reason.");
    codemirror.setOption('mode', 'markdown');
    codemirror.setOption('value', this.content);
    $(".CodeMirror").width($('body').width() - 30);
    $('.CodeMirror').find('.save-button').unbind('click').click(function() {
      return me.save.call(me);
    });
    $('.codeblanket').unbind('click').click(function() {
      if (confirm("Cancel editing?")) {
        return me.finish_editing.call(me);
      }
    });
    $('.CodeMirror').show();
    $('.codeblanket').show();
    return codemirror.scrollIntoView();
  };

  MarkdownSegment.prototype.save = function() {
    console.log("cleaning up markdown");
    this.content = codemirror.getValue();
    this.reload_markdown();
    return this.finish_editing();
  };

  MarkdownSegment.prototype.reload_markdown = function() {
    this.dom_element.children(".markdown").remove();
    this.dom_element.append(this.render());
    return lit.contentUpdated();
  };

  MarkdownSegment.prototype.finish_editing = function() {
    this.is_editing = false;
    $('.CodeMirror').hide();
    $('.codeblanket').hide();
    return $(".codeblanket").unbind();
  };

  return MarkdownSegment;

})(DocumentSegment);

ConsoleSegment = (function(_super) {
  __extends(ConsoleSegment, _super);

  function ConsoleSegment(content) {
    this.content = content != null ? content : "";
    ConsoleSegment.__super__.constructor.call(this);
  }

  ConsoleSegment.identifier = /##CONSOLE##/;

  ConsoleSegment.prototype.load = function(content) {
    return this.content = content;
  };

  ConsoleSegment.prototype.run = function() {
    this.my_element().html('').append(this.render());
    return true;
  };

  ConsoleSegment.prototype["export"] = function() {
    return '\n##CONSOLE##\n';
  };

  ConsoleSegment.prototype.render = function(self) {
    var content, element;

    content = " > " + lit.empty_print_buffer().join("\n > ");
    element = $("<div class='console'>" + content + "</div>");
    element.attr('data-code', content);
    return element;
  };

  return ConsoleSegment;

})(DocumentSegment);

GenericCompiler = (function() {
  function GenericCompiler() {
    this.name = "GenericCompiler";
    this.language = "none";
  }

  GenericCompiler.prototype.compile = function(code) {
    assert(false, "You can't compile using the generic compiler.");
    return "0";
  };

  GenericCompiler.prototype.run = function(assembly) {
    return eval.call(window, assembly);
  };

  return GenericCompiler;

})();

RubyCompiler = (function(_super) {
  __extends(RubyCompiler, _super);

  function RubyCompiler() {
    this.name = "RubyCompiler (opal)";
    this.language = "text/x-ruby";
    window.rubyconsole = {
      log: function(p) {
        return lit.print(p);
      },
      warn: function(p) {
        return lit.print("Warning: p");
      }
    };
  }

  RubyCompiler.prototype.compile = function(code) {
    return Opal.compile(code);
  };

  return RubyCompiler;

})(GenericCompiler);

CoffeeScriptCompiler = (function(_super) {
  __extends(CoffeeScriptCompiler, _super);

  function CoffeeScriptCompiler() {
    this.name = "CoffeeScriptCompiler";
    this.language = "CoffeeScript";
  }

  CoffeeScriptCompiler.prototype.compile = function(code) {
    return CoffeeScript.compile(code, {
      bare: true,
      nowrap: true
    });
  };

  return CoffeeScriptCompiler;

})(GenericCompiler);

PythonCompiler = (function(_super) {
  __extends(PythonCompiler, _super);

  function PythonCompiler() {
    this.name = "PythonCompiler";
    this.language = "Python";
    Sk.canvas = null;
    Sk.pre = null;
    Sk.configure({
      output: function(out) {
        return lit.print(out);
      }
    });
  }

  PythonCompiler.prototype.compile = function(code) {
    return Sk.importMainWithBody("<stdin>", false, code);
  };

  return PythonCompiler;

})(GenericCompiler);

window.assert = function(condition, error) {
  if (!condition) {
    throw error;
  }
  return true;
};

$(function() {
  window.compiler = new CoffeeScriptCompiler();
  window.lit = new LiterateLoader();
  $('body').on('dragover', function(e) {
    e.preventDefault();
    return e.stopPropagation();
  });
  $('body').on('drop', function(e) {
    var f, files, reader, _i, _len, _results;

    e.preventDefault();
    e.stopPropagation();
    console.log(files = e.originalEvent.dataTransfer.files);
    _results = [];
    for (_i = 0, _len = files.length; _i < _len; _i++) {
      f = files[_i];
      console.log("Loading file " + f.name + "...");
      reader = new FileReader();
      reader.onload = function() {
        console.log(reader.result);
        lit.load(reader.result);
        lit.render();
        lit.run();
        return $('.welcome').hide();
      };
      _results.push(reader.readAsText(f));
    }
    return _results;
  });
  hljs.initHighlightingOnLoad();
  $('.markdown').each(function() {
    return $(this).html(marked($(this).html()));
  });
  $('.run-button').click(function() {
    return lit.run();
  });
  window.codemirror = CodeMirror(document.body, {
    value: "this is a test",
    mode: "coffeescript",
    theme: "ambiance",
    lineNumbers: true,
    indentWithTabs: true
  });
  $(".CodeMirror").append("<div class='save-button'>SAVE</div>");
  $(window).keydown(function(e) {
    if (!((e.which === 115 || e.which === 83) && e.ctrlKey) && !(e.which === 19)) {
      return true;
    }
    lit.save();
    e.preventDefault();
    return false;
  });
  $('.download-button').click(function() {
    var code, pom;

    code = lit["export"]();
    pom = document.createElement('a');
    pom.setAttribute('href', 'data:text/plain;charset=utf-8;base64,' + btoa(code));
    pom.setAttribute('download', "" + window.filename + ".litcoffee");
    return pom.click();
  });
  window.math = mathjs();
  window.filename = window.location.pathname.substring(1);
  return $.get("/raw/" + window.filename, function(r) {
    lit.load(r);
    lit.render();
    return lit.run();
  });
});
