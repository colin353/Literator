// Generated by CoffeeScript 1.6.2
(function() {
  var ConsoleSegment, DocumentSegment, MarkdownSegment,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  window.LiterateLoader = (function() {
    function LiterateLoader() {
      this.debug = true;
      this.print_buffer = [];
    }

    LiterateLoader.prototype.identify_segment = function(line) {
      var s, segment_types, _i, _len;

      segment_types = [CodeSegment, ConsoleSegment, MarkdownSegment];
      for (_i = 0, _len = segment_types.length; _i < _len; _i++) {
        s = segment_types[_i];
        if (s.identifier.test(line)) {
          return s;
        }
      }
      return assert(false, "No identifier matched the target...");
    };

    LiterateLoader.prototype.load = function(text) {
      var block_type, code, line, lines, markdown, s, seg_type, segment, this_seg_type, _i, _j, _len, _len1, _ref;

      this.clear();
      lines = text.split(/\n/);
      block_type = null;
      code = markdown = "";
      this.segments = [];
      line = lines.shift();
      seg_type = this.identify_segment(line);
      segment = new seg_type();
      segment.lines.push(line);
      for (_i = 0, _len = lines.length; _i < _len; _i++) {
        line = lines[_i];
        this_seg_type = this.identify_segment(line);
        if (this_seg_type === seg_type) {
          segment.lines.push(line);
        } else {
          seg_type = this_seg_type;
          segment.finish_loading();
          this.segments.push(segment);
          segment = new this_seg_type();
          segment.lines.push(line);
        }
      }
      segment.finish_loading();
      this.segments.push(segment);
      _ref = this.segments;
      for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
        s = _ref[_j];
        $('.literate').append(s.encapsulate());
      }
      return this.contentUpdated();
    };

    LiterateLoader.prototype.print = function(text) {
      return this.print_buffer.push(text);
    };

    LiterateLoader.prototype.empty_print_buffer = function() {
      var p;

      p = this.print_buffer;
      this.print_buffer = [];
      return p;
    };

    LiterateLoader.prototype.run = function() {
      var error, s, _i, _len, _ref, _results;

      try {
        _ref = this.segments;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          s = _ref[_i];
          _results.push(s.run());
        }
        return _results;
      } catch (_error) {
        error = _error;
        return console.log("Execution halted due to errors: ", error);
      }
    };

    LiterateLoader.prototype.clear = function() {
      return $('.literate').html('');
    };

    LiterateLoader.prototype.contentUpdated = function() {
      $('.markdown').each(function() {
        return $(this).html(marked($(this).text()));
      });
      return $('.code').each(function() {
        if ($(this).attr('data-code') != null) {
          return $(this).html(hljs.highlight('coffeescript', $(this).attr('data-code')).value);
        } else {
          return $(this).html(hljs.highlight('coffeescript', $(this).html()).value);
        }
      });
    };

    return LiterateLoader;

  })();

  DocumentSegment = (function() {
    function DocumentSegment(encapsulation_id) {
      this.encapsulation_id = encapsulation_id != null ? encapsulation_id : false;
      this.dom_element = null;
      if (!this.encapsulation_id) {
        this.encapsulation_id = "" + Math.floor(Math.random() * 1000000);
      }
      this.lines = [];
    }

    DocumentSegment.prototype.finish_loading = function() {
      return this.load(this.lines.join("\n"));
    };

    DocumentSegment.prototype.load = function() {
      return assert(false, 'Invalid call of base DocumentSegment load.');
    };

    DocumentSegment.prototype.run = function() {
      return true;
    };

    DocumentSegment.prototype.my_element_string = function() {
      return "literate_segment_" + this.encapsulation_id;
    };

    DocumentSegment.prototype.my_element = function() {
      return $("#" + (this.my_element_string()));
    };

    DocumentSegment.prototype.render = function() {
      return assert(false, "It is illegal to try to render a generic DocumentSegment");
    };

    DocumentSegment.prototype.encapsulate = function() {
      var s;

      s = "<div class='segment' id='" + (this.my_element_string()) + "'></div>";
      this.dom_element = $(s);
      this.dom_element.append(this.render());
      return this.dom_element;
    };

    return DocumentSegment;

  })();

  window.CodeSegment = (function(_super) {
    __extends(CodeSegment, _super);

    function CodeSegment(code) {
      this.code = code != null ? code : "";
      CodeSegment.__super__.constructor.call(this);
      true;
    }

    CodeSegment.identifier = /^\t/;

    CodeSegment.prototype.load = function(code) {
      return this.code = code;
    };

    CodeSegment.prototype.finish_loading = function() {
      var line;

      this.lines = (function() {
        var _i, _len, _ref, _results;

        _ref = this.lines;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          line = _ref[_i];
          _results.push(line.replace(/^\t/, ''));
        }
        return _results;
      }).call(this);
      return this.load(this.lines.join("\n"));
    };

    CodeSegment.prototype.run = function() {
      var error, js_code;

      this.my_element().removeClass('error');
      js_code = "";
      try {
        js_code = CoffeeScript.compile(this.code);
      } catch (_error) {
        error = _error;
        this.my_element().addClass('error');
        console.log("Error compiling CoffeeScript on element with error: ", error);
        throw "Error found in compiling coffeescript, finishing.";
      }
      try {
        return eval(js_code);
      } catch (_error) {
        error = _error;
        this.my_element().addClass('error');
        console.log("Error compiling CoffeeScript on element with error: ", error);
        throw "Error found in running compiled JS, finishing.";
      }
    };

    CodeSegment.prototype.render = function(self) {
      var element;

      element = $("<div class='code'></div>");
      element.attr('data-code', this.code);
      return element;
    };

    return CodeSegment;

  })(DocumentSegment);

  MarkdownSegment = (function(_super) {
    __extends(MarkdownSegment, _super);

    function MarkdownSegment(content) {
      this.content = content != null ? content : "";
      MarkdownSegment.__super__.constructor.call(this);
    }

    MarkdownSegment.identifier = /^[^\t]/;

    MarkdownSegment.prototype.load = function(content) {
      return this.content = content;
    };

    MarkdownSegment.prototype.render = function(self) {
      var element;

      element = $("<div class='markdown'>" + this.content + "</div>");
      element.attr('data-markdown', this.content);
      return element;
    };

    return MarkdownSegment;

  })(DocumentSegment);

  ConsoleSegment = (function(_super) {
    __extends(ConsoleSegment, _super);

    function ConsoleSegment(content) {
      this.content = content != null ? content : "";
      ConsoleSegment.__super__.constructor.call(this);
    }

    ConsoleSegment.identifier = /##CONSOLE##/;

    ConsoleSegment.prototype.load = function(content) {
      return this.content = content;
    };

    ConsoleSegment.prototype.run = function() {
      this.my_element().html('').append(this.render());
      return true;
    };

    ConsoleSegment.prototype.render = function(self) {
      var content, element;

      content = " > " + lit.empty_print_buffer().join("\n > ");
      element = $("<div class='console'>" + content + "</div>");
      element.attr('data-code', content);
      return element;
    };

    return ConsoleSegment;

  })(DocumentSegment);

  window.assert = function(condition, error) {
    if (!condition) {
      throw error;
    }
    return true;
  };

  $(function() {
    window.lit = new LiterateLoader();
    $('body').on('dragover', function(e) {
      e.preventDefault();
      return e.stopPropagation();
    });
    $('body').on('drop', function(e) {
      var f, files, reader, _i, _len, _results;

      e.preventDefault();
      e.stopPropagation();
      console.log(files = e.originalEvent.dataTransfer.files);
      _results = [];
      for (_i = 0, _len = files.length; _i < _len; _i++) {
        f = files[_i];
        console.log("Loading file " + f.name + "...");
        reader = new FileReader();
        reader.onload = function() {
          console.log(reader.result);
          window.lit.load(reader.result);
          return $('.welcome').hide();
        };
        _results.push(reader.readAsText(f));
      }
      return _results;
    });
    hljs.initHighlightingOnLoad();
    $('.markdown').each(function() {
      return $(this).html(marked($(this).html()));
    });
    return $('.run-button').click(function() {
      return lit.run();
    });
  });

}).call(this);
